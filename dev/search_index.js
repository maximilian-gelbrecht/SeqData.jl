var documenterSearchIndex = {"docs":
[{"location":"#SeqData-1","page":"Home","title":"SeqData","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"SeqData is a small package that provides a data type for sequential data for learning problems. It saves a lot of memory as it does not save the identical data many times but uses a modified indexing.","category":"page"},{"location":"#Usage-1","page":"Home","title":"Usage","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Everything you need to now is in the doc string:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"SequentialData","category":"page"},{"location":"#SeqData.SequentialData","page":"Home","title":"SeqData.SequentialData","text":"SequentialData\n\nStruct with initialization for preparing sequence data for a learning problem. It saves a lot of memory because it uses Julia's iterator interface and does not save the same data multiple times as a naive implementation would do. The default initialization splits the data into a train, valid and test set.\n\nSequentialData can be used for for-loops with for i in data and also indexed with data[i]. Each element is a 2-element array containing the input and output for the learning problem.\n\nIf more than one trajectory is provided, each trajectory will be divided in train, valid and test sets and these sets will then be combined to form the full train, valid and test sets.\n\nIt is possible to output batches of data.\n\nFields of the struct\n\ndata::AbstractArray: Raw Data as a N_dim times N_t times N_i array\nN_batch::Int: Batch Size\nN_length::Int: Length of each sample\nN::Int: Total number of individual train/valid/test data pairs available\nN_i::Int: Number of Input Trajectories\nN_tr_i::Int: Number of individual train/valid/test data pairs available per trajectory\nN_t::Int: Number of time steps per trajectory\n\nInitialization\n\nSequentialData(input_data::AbstractArray, N_batch::Int, N_length::Int, N_train::Int, N_valid::Int; supervised::Bool=false)\n\nInput\n\ninput_data::AbstractArray: Raw data in either a N_dim times N_t times N_i or N_dim times N_t array\nN_batch::Int: Batch size, If N_batch==0 the output will be 2D without any batching\nN_length::Int: Length of each sample\nN_train::Real: Relative Number of input samples for training\nN_valid::Real: Relative Number of input samples for validation. All remaining time steps will form the test set\nsupervised::Bool: If true every indexing will return a pair of arrays where the second array is shifted by 1 from the first array.\n\nIf N_i  1 all values are refering to each trajectory seperately.\n\nOutput\n\nReturns three instances of SequentialData in order (train_set, valid_set, test_set).\n\n\n\n\n\n","category":"type"}]
}
